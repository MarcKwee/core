id: OauthToken
steps:

- date:
    _output: /now
    format: X

- read:
    _output: /client
    model: OauthClient
    id: /client_id

- if:
    left: /client/type
    right: confidential
    then:
      # Check the client authorization.
      # This can be done via HTTP basic authentication or the client_secret field.
      - static:
          _output: /allow
          value: false
      - array:
          _output: /client/authorization-header
          items:
            - /client/id
            - ':'
            - /client/secret
      - join:
          _output: /client/authorization-header
          input: /client/authorization-header
      - handlebars:
          _output: /client/authorization-header
          template: "Basic {{{base64 value}}}"
          value: /client/authorization-header
      - if:
          left: /headers/authorization
          right: /client/authorization-header
          then:
            - static:
                _output: /allow
                value: true
      - if:
          left: /client_secret
          right: /client/secret
          then:
            - static:
                _output: /allow
                value: true
      - if:
          left: /allow
          right: false
          then:
            - error:
                type: Unauthorized

- static:
    _output: /data/status
    value: 400

- if:
    left: /grant_type
    right: authorization_code
    then:
      - object:
          _output: /filters
          code: /code
          client: /client/id
      - math:
          _output: /filters/expires_gte
          formula: now
          now: /now
      - select:
          _output: /codes
          model: OauthAuthorizationCode
          filters: /filters
          selections:
            items:
              code:
              scope:
              user:
                id:
              client:
                id:
      - if:
          left: /codes/items/0
          then:

            # Immediately delete code, as this is a one-time token.
            - delete:
                model: OauthAuthorizationCode
                id: /codes/items/0/id

            # Check if an access token already exists.
            - object:
                _output: /filters
                client: /codes/items/0/client/id
                user: /codes/items/0/user/id
                scope: /codes/items/0/scope
            # Only remember login when token is still valid for at least 15 minutes.
            - math:
                _output: /filters/expires_gt
                formula: now + 900
                now: /now
            - select:
                _output: /tokens
                model: OauthAccessToken
                filters: /filters
                selections:
                  items:
                    id:
                    token:
                    expires:
                    user:
                      id:
                    client:
                      id:
                      type:
            - if:
                left: /tokens/items/0/id
                then:
                  # We already have an access token. Reuse that one.
                  - object:
                      _output: /data/body
                      access_token: /tokens/items/0/token
                      token_type: bearer
                      user_id: /tokens/items/0/user/id
                  - math:
                      _output: /data/body/expires_in
                      formula: 'expires - now'
                      now: /now
                      expires: /tokens/items/0/expires
                  # Also re-use the refresh token for confidential clients.
                  - if:
                      left: /tokens/items/0/client/type
                      right: confidential
                      then:
                        - select:
                            _output: /refresh-tokens
                            model: OauthRefreshToken
                            filters: /filters
                            selections:
                              items:
                                 token:
                        - copy:
                            _output: /data/body/refresh_token
                            input: /refresh-tokens/items/0/token
                else:
                  # Create a new access token.
                  - script:
                      _output: /token
                      script: OauthCreateToken
                      client: /codes/items/0/client
                      user: /codes/items/0/user
                      scope: /codes/items/0/scope
                  - object:
                      _output: /data/body
                      access_token: /token/token
                      token_type: bearer
                      user_id: /token/user
                  - math:
                      _output: /data/body/expires_in
                      formula: 'expires - now'
                      now: /now
                      expires: /token/expires
                  - if:
                      left: /token/refresh_token
                      then:
                        - copy:
                            _output: /data/body/refresh_token
                            input: /token/refresh_token
            - static:
                _output: /data/status
                value: 200

- if:
    left: /grant_type
    right: refresh_token
    then:
      - object:
          _output: /filters
          token: /refresh_token
          client: /client/id
      - math:
          _output: /filters/expires_gte
          formula: now
          now: /now
      - select:
          _output: /refresh-tokens
          model: OauthRefreshToken
          filters: /filters
          selections:
            items:
              id:
              scope:
              user:
                id:
              client:
                id:
                type:
      - if:
          left: /refresh-tokens/items/0
          then:
            # Delete old refresh token.
            - delete:
                model: OauthRefreshToken
                id: /refresh-tokens/items/0/id
            # Create a new access token.
            - script:
                _output: /token
                script: OauthCreateToken
                client: /client
                user: /refresh-tokens/items/0/user
                scope: /refresh-tokens/items/0/scope
            - object:
                _output: /data/body
                access_token: /token/token
                token_type: bearer
                user_id: /token/user
            - math:
                _output: /data/body/expires_in
                formula: 'expires - now'
                now: /now
                expires: /token/expires
            - copy:
                _output: /data/body/refresh_token
                input: /token/refresh_token
            - static:
                _output: /data/status
                value: 200

# Set security related headers.
- static:
    _output: /data/headers/Cache-Control
    value: no-store
- static:
    _output: /data/headers/Pragma
    value: no-cache
